/* For each program, there is a hierarchy of scopes consisting of: the global scope, class scopes,
method scopes, and local scopes for blocks within each method, rules:

1. When resolving an identifier at a certain point in the program, the enclosing scopes are
   searched for that identifier.

2. Fields and methods, both static and virtual, can be used either directly (without the dot prefix) if the
   current class contains those fields or method

3. The current class scope is the instance scope if the current 
   method is virtual; or the static class scope if the current method is static.

output: (third rule violation)
semantic error at line 51: cannot use this in a static context
*/

class A
{ 
  int a;
  static void main (string [] args){
  
  }
  
  void virtual_foo(){
  
  }
  
}

class B extends A{
 
  // legal
  static void static_func1(){
    static_foo();
  }
  
  // legal
  void virtual_func2(){
    virtual_foo();
  }
  
  // legal
   void virtual_func3(){
    static_foo();
  }
  
  // illegal
  static void static_foo(){
    while(1 < 2){
      {{{
         B b = this;
         b.virtual_foo();
         
      }}}
    }
  }
}

 

 