/* Created By Micha Sherman,Tzvika Geft and Rani Lichtman 
 * Compilation course, University of Tel Aviv 2012 ©   
 */
 
package IC.Parser;

import IC.*;
import IC.AST.*;
import IC.Parser.*;
import java.util.*;
import IC.Parser.LibraryParser.Global;
import IC.Parser.Debugger.*;
import java_cup.runtime.*;

/************************************************************************
*************************************************************************
    --------------- high level IC grammar specification ---------------
    
* with a few changes from original IC grammer (due to implementation reasons)

program       ::= class*
class         ::= class CLASS [extends CLASS] '{' [fomList] '}'
field         ::= type idList ';'
method        ::= [static] ( type | void ) ID '(' [ funcParams ] ')' stmtBlock
FieldOrMethod ::= (field | method);
fomList       ::= FieldOrMethod*
idList        ::= ID (',' ID)*
funcParams    ::= type ID (',' type ID)*
type          ::= INT | BOOLEAN | STRING | CLASS | type '[' ']'
stmt          ::= location '=' expr ';'
              |   call ';'
              |   return [ expr ] ';'
              |   if '(' expr ')' stmt [ else stmt ]
              |   while '(' expr ')' stmt
              |   break ';'
              |   continue ';'
              |   stmtBlock   
              |   type ID [ '=' expr ] ';'

stmts         ::= stmt+
stmtBlock     ::= '{' stmts '}' | '{' '}'
expr          ::= location
              |   call
              |   this
		      |   new CLASS '(' ')'
		      |   new type '[' expr ']'
		      |   expr '.' length
		      |   expr binop expr // instead is now just binop and binop is expr binoperator expr
	   	      |   unop expr
		      |   literal
		      |   exprBlock
		      
exprBlock     ::= '(' expr ')'

call        ::= staticCall | virtualCall
staticCall  ::= CLASS_ID '.' ID '(' [ args ] ')'
virtualCall ::= [ expr '.' ] ID '(' [ args ] ')'
location    ::= ID | expr '.' id | expr '[' expr ']'

args        ::= expr ( ',' expr )* 

binop   ::= '+' | '-' | '*' | '/' | '%' | '&&' | '||'
            '<' | '<='| '>' | '>='| '=='| '!=' 
unop    ::= '-' | '!'
literal ::= INTEGER | STRING | true | false | null
*************************************************************************
*************************************************************************/

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

	/* global veriables */
	private Lexer lexer;
	private boolean printTokens = false;
	
	public static class Global{
	
    	public static Debugger debugger = null;
    }
    
    /* 
	public void syntax_error(Symbol s) {
		Token t = (Token) s;
		System.out.println("Line " + t.getLine()+": Syntax error; unexpected " + t);
	}
	*/
	
	private String debugFilePath = "C:\\files\\libParserDebug.txt";
	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
		Global.debugger = Debugger.getDebuggerInstance();
		//Global.debugger.Print("---------- IC parser section ----------\n");
	}
	
	
	   
	   /* called by the parser as soon as a syntax error
	      is detected (but before error recovery is attempted) */
       public void syntax_error(Symbol currentToken){
        //throw new SyntaxError();
        Token t = (Token) currentToken;
        //System.out.println("called syntax_error() with " + t);
      }
      
      /* called by the parser if it is unable to recover
         from a syntax error */
      public void unrecovered_syntax_error(Symbol currentToken) throws SyntaxError{
        //System.out.println("called unrecovered_syntax_error() " );
        
        throw new SyntaxError((Token)currentToken);
        
        
      }
       
       
       

	
:};

scan with {:
	Token t = lexer.next_token();
	if(!t.isEOF() && printTokens)
		System.out.println(t.toString());
	return t; 
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner) */

terminal  ASSIGN   ;  // '=' 
terminal  GT       ;  // '>'
terminal  LT       ;  // '<'
terminal  LNEG     ;  // '!'
terminal  EQUAL    ;  // '=='
terminal  LTE      ;  // '<='
terminal  GTE      ;  // '>='
terminal  NEQUAL   ;  // '!='
terminal  LAND     ;  // '&&'
terminal  LOR      ;  // '||'
terminal  PLUS     ;  // '+'
terminal  MINUS    ;  // '-'
terminal  UMINUS   ;  // unary '-'
terminal  MULTIPLY ;  // '*'
terminal  DIVIDE   ;  // '/' 
terminal  MOD      ;  // '%'

  
/* ---- separators ---- */
 
terminal  LP       ;  // '('
terminal  RP       ;  // ')'
terminal  LCBR     ;  // '{'
terminal  RCBR     ;  // '}'
terminal  LB       ;  // '['
terminal  RB       ;  // ']'
terminal  SEMI     ;  // ';'
terminal  COMMA    ;  // ','
terminal  DOT      ;  // '.'


/* ---- IC keywords ---- */
  
terminal  CLASS    ;  // 'class'
terminal  EXTENDS  ;  // 'extends'
terminal  STATIC   ;  // 'static'
terminal  VOID     ;  // 'void'
terminal  IF       ;  // 'if'
terminal  ELSE     ;  // 'else'
terminal  WHILE    ;  // 'while'
terminal  CONTINUE ;  // 'continue'
terminal  BREAK    ;  // 'break'
terminal  BOOLEAN  ;  // 'boolean'
terminal  INT      ;  // 'int'
terminal  LENGTH   ;  // 'length'
terminal  NEW      ;  // 'new'
terminal  RETURN   ;  // 'return'
terminal  THIS     ;  // 'this'
terminal  STRING   ;  // 'string(keyword)'


/* boolean literals */
  
terminal  FALSE    ;  // 'false'
terminal  TRUE     ;  // 'true'
  
  
/* ---- null literal ---- */
  
terminal  NULL     ;  // 'null'


/* ---- terminal with types ---- */
terminal String  ID        ;  // 'identifier'
terminal String  CLASS_ID  ;  // 'class identifier'
terminal String  QUOTE     ;  // 'quoted string'
terminal Integer INTEGER   ;  // 'integer'



/* Non terminals used in the grammar section */
/* for example if we define non terminal classname then classname
 is the class for the AST node associated with the non-terminal */
 
 
/* program related non terminals */
 
non terminal Program program;
non terminal ICClass class;
non terminal Field field;
non terminal List<Field> fields;
non terminal IdList idList;

/* method related non terminals */

non terminal Method method;
non terminal List<FieldOrMethod> fomList;
non terminal Formal formal;
non terminal FunctionParameters funcParams;
non terminal Type type;

/* statement related non terminals */

non terminal Statement stmt;
non terminal StatementsBlock stmtBlock;
non terminal List<Statement> stmts;

/* expression calls related non terminals */

non terminal Expression expr;
non terminal ExpressionBlock exprBlock;
non terminal BinaryOp binop;
non terminal UnaryOp unop;
non terminal Location location;
non terminal Literal literal;

/* function calls related non terminals */

non terminal Call call;
non terminal CallArguments args;
non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;


/* ------------ precedences as defined in IC specification ----------- */
/* The precedences are in a form that the last precedences defined 
   are of the highest evaluation priority */

precedence right ASSIGN;                 /* '='               */
precedence left LOR;                     /* '||'              */
precedence left LAND;                    /* '&&'              */
precedence left EQUAL, NEQUAL;           /* '==','!='         */
precedence left LT, LTE, GT, GTE;        /* '<','<=','>','>=' */
precedence left PLUS, MINUS;             /* '+','-'           */
precedence left MULTIPLY, DIVIDE, MOD;   /* '*','%'           */
precedence right UMINUS, LNEG;           /* '-','!'           */
precedence left LB, RB, LP, RP, DOT;     /* '()','[]','.'     */
precedence left IF, ELSE;                /* 'if','else'       */



/* ----------------------------TBD: resolve next questions -------------------- */


/*

1) "int a,b,c;" can be representd as fields in class, 
   the grammer is'nt letting to define "int a,b,c" iside a function??
   or can a field be a part of a function too (unlikely)
   
2) what to do with ExpressionBlock (what is it for?) and StatementBlock, they are part of the AST
   but I'm having trouble using them as an empty field, and if empty is legal what line should
   I give them as an agrument??
   *** I used StatementBlock because StatementBlock extends Statement and then I can
   evaluate the stmt -> { stmtBlock } rule
   
   update: resolved!! but check all posibilities; 
   
   
 3) quicksort.ic is OK BUT all the string literals
    the problem is that the literal "abc" for example should be transformed
    to " \" abc \" " in the AST print. maybe we didn't evaluate string properly in the lexical stage??? 
 
    

*/





/* ----------------------------Grammar Section-------------------- */

program   ::= class : c
            {: List<ICClass> classes = new ArrayList<ICClass>();
               classes.add(c);
               RESULT = new Program(classes);
               //Global.debugger.Print("reduced program : " + RESULT); 
            :}
           
           | program : p class : c    
            {: List<ICClass> programClasses = (ArrayList<ICClass>) p.getClasses();
		       programClasses.add(c);     // add new class to program classes
		       p.setClasses(programClasses);	
               RESULT = p;
               //Global.debugger.Print("reduced program : " + RESULT); 
            :}
;       
           
           
class     ::= CLASS CLASS_ID : class_id LCBR RCBR
            {: RESULT = new ICClass(class_idleft, class_id,new ArrayList<Field>(),new ArrayList<Method>()); 
               //Global.debugger.Print("reduced library : " + RESULT); 
            :}
            
           |  CLASS CLASS_ID : class_id LCBR fomList : foms RCBR
            {: ArrayList<Field> fieldList = ICClass.GetFieldsFromFOMlist(foms);
               ArrayList<Method> methodList = ICClass.GetMethodsFromFOMlist(foms);
               RESULT = new ICClass(class_idleft, class_id,fieldList,methodList); 
               //Global.debugger.Print("reduced class : " + RESULT); 
            :}
            
           |  CLASS CLASS_ID : class_id EXTENDS CLASS_ID : ext_class LCBR RCBR
            {: RESULT = new ICClass(class_idleft, class_id,ext_class,new ArrayList<Field>(),new ArrayList<Method>()); 
               //Global.debugger.Print("reduced class : " + RESULT); 
            :}     
            
           |  CLASS CLASS_ID : class_id EXTENDS CLASS_ID : ext_class LCBR fomList : foms RCBR
            {: ArrayList<Field> fieldList = ICClass.GetFieldsFromFOMlist(foms);
               ArrayList<Method> methodList = ICClass.GetMethodsFromFOMlist(foms);
               RESULT = new ICClass(class_idleft, class_id,ext_class,fieldList,methodList); 
               //Global.debugger.Print("reduced class : " + RESULT);
            :}             
;
       
fomList   ::= method : m 
            {: ArrayList<FieldOrMethod> foms = new ArrayList<FieldOrMethod>();
               foms.add(new FieldOrMethod(m));
               RESULT = foms ;
               //Global.debugger.Print("reduced fomList: " + RESULT); 
            :}
            
           |  fields : fieldList
            {: ArrayList<FieldOrMethod> foms = new ArrayList<FieldOrMethod>();
               for (Field field : fieldList){
                 foms.add(new FieldOrMethod(field));
               }
               RESULT = foms ;
               //Global.debugger.Print("reduced fomList list : " + RESULT); 
            :}
            
           |  fomList : foms method : m
            {: foms.add(new FieldOrMethod(m));
               RESULT = foms ;
               //Global.debugger.Print("reduced fomList: " + RESULT); 
            :}
            
          |  fomList : foms  fields : fieldList
            {:  for (Field field : fieldList){
                 foms.add(new FieldOrMethod(field));
               }
               RESULT = foms ;
               //Global.debugger.Print("reduced fomList list : " + RESULT);  
            :}        
;


method    ::= STATIC type : t ID : ident LP funcParams : params RP stmtBlock : stmt_block       // static function (of type t) decleration *with* parameters                             
            {: RESULT = new StaticMethod(t, ident, params.getParameters(),stmt_block.getStatements());
               //Global.debugger.Print("reduced static method: " + RESULT);         
            :}
            
         |    STATIC VOID ID : ident LP funcParams : params RP stmtBlock : stmt_block		    // static function (of type void) decleration *with* parameters 
            {: RESULT = new StaticMethod(new PrimitiveType(identleft, DataTypes.VOID), ident, params.getParameters(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced static method: " + RESULT);         
            :}
            
         |    STATIC type : t ID : ident LP RP stmtBlock : stmt_block			    	        // static function (of type t) decleration *without* parameters
            {: RESULT = new StaticMethod(t, ident, new ArrayList<Formal>(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced static method: " + RESULT);         
            :}
            
         |    STATIC VOID ID : ident LP RP stmtBlock : stmt_block				                // static function (of type void) decleration *without* parameter
            {: RESULT = new StaticMethod(new PrimitiveType(identleft, DataTypes.VOID), ident, new ArrayList<Formal>(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced static method: " + RESULT);         
            :}
            
         |    type : t ID : ident LP funcParams : params RP stmtBlock : stmt_block              // virtual function (of type t) decleration *with* parameters                             
           {: RESULT = new VirtualMethod(t, ident, params.getParameters(),stmt_block.getStatements());
               //Global.debugger.Print("reduced virtual method: " + RESULT);         
            :}
            
         |    VOID ID : ident LP funcParams : params RP stmtBlock : stmt_block	                // virtual function (of type void) decleration *with* parameters 
            {: RESULT = new VirtualMethod(new PrimitiveType(identleft, DataTypes.VOID), ident, params.getParameters(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced virtual method: " + RESULT);         
            :}
            
         |    type : t ID : ident LP RP stmtBlock : stmt_block			    	                // virtual function (of type t) decleration *without* parameters
            {: RESULT = new VirtualMethod(t, ident, new ArrayList<Formal>(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced virtual method: " + RESULT);         
            :}
            
         |    VOID ID : ident LP RP stmtBlock : stmt_block						                // virtual function (of type void) decleration *without* parameter
            {: RESULT = new VirtualMethod(new PrimitiveType(identleft, DataTypes.VOID), ident, new ArrayList<Formal>(),stmt_block.getStatements()); 
               //Global.debugger.Print("reduced virtual method: " + RESULT);         
            :}
;

fields   ::= type : t idList : ids SEMI
            {: RESULT = ids.ConstructFieldsFromIDs (t);
               //Global.debugger.Print("reduced field list : " + RESULT); 
            :}
;


idList    ::= ID : identifier
            {: RESULT = new IdList(identifier);
               //Global.debugger.Print("reduced idList "); 
            :}
            
           |   idList : ids COMMA ID : new_identifier
            {: ids.addID(new_identifier);
               RESULT = ids;
               //Global.debugger.Print("reduced idList "); 
            :}
;



stmtBlock ::= LCBR : lbrace RCBR : rbrace
            {: RESULT = new StatementsBlock(lbraceleft);
               //Global.debugger.Print("reduced idList "); 
            :}
            
           |  LCBR : lbrace stmts : stmtList RCBR : rbrace
            {: RESULT = new StatementsBlock(lbraceleft,stmtList);
               //Global.debugger.Print("reduced idList "); 
            :}
;

stmts     ::= stmt : s
            {: List<Statement> stmtList = new ArrayList<Statement>();   // this is for empty statement block
               stmtList.add(s);
               RESULT = stmtList;
               //Global.debugger.Print("reduced empty stmt list"); 
            :}
            
           | stmts : stmtList stmt : new_stmt
            {: stmtList.add(new_stmt);
			   RESULT = stmtList;
               //Global.debugger.Print("reduced stmt list : " + RESULT); 
            :}          
;


stmt      ::= location : variable ASSIGN expr : assignment SEMI
            {: RESULT = new Assignment(variable,assignment);
               //Global.debugger.Print("reduced assignment " + RESULT);         
            :}

           |   BREAK : brk SEMI                                 
            {: RESULT = new Break(brkleft);
               //Global.debugger.Print("reduced break ");         
            :}
           |   CONTINUE : cont SEMI                                 
            {: RESULT = new Continue(contleft);
               //Global.debugger.Print("reduced continue ");         
            :}
            
           |   RETURN : ret SEMI                                 
            {: RESULT = new Return(retleft);
               //Global.debugger.Print("reduced return; ");         
            :} 
            
           |   RETURN : ret expr : value SEMI                                  
            {: RESULT = new Return(retleft,value);
               //Global.debugger.Print("reduced return expr; ");         
            :}  
            
           |   type : t ID : identifier SEMI
           
            {: RESULT = new LocalVariable(t,identifier);
               //Global.debugger.Print("reduced return local variable" + RESULT);         
            :}  
           
           |   type : t ID : identifier ASSIGN expr : initValue SEMI 
            {: RESULT = new LocalVariable(t,identifier,initValue);
               //Global.debugger.Print("reduced return local variable" + RESULT);         
            :}  
            
           |   IF LP expr : condition RP stmt : operation
            {: RESULT = new If(condition,operation);
               //Global.debugger.Print("reduced if without else");         
            :}  
            
           |  IF LP expr : condition RP stmt : operation ELSE stmt : elseOperation
            {: RESULT = new If(condition,operation,elseOperation);
               //Global.debugger.Print("reduced if with else");         
            :}
            
           |  WHILE LP expr : condition RP stmt : operation
            {: RESULT = new While(condition,operation);
               //Global.debugger.Print("reduced while statement");         
            :}
            
           |  stmtBlock : stmt_block
            {: RESULT = stmt_block;
               //Global.debugger.Print("reduced { statement }");         
            :}      
          
           |  call : call_statement SEMI
            {: RESULT = new CallStatement(call_statement);
               //Global.debugger.Print("reduced call statement");         
            :}               
              
            
;

call   ::=    staticCall : static_call
            {: RESULT = static_call ;
               //Global.debugger.Print("reduced call (static)" ); 
            :}
            
           |   virtualCall : virtual_call
            {:RESULT = virtual_call;
               //Global.debugger.Print("reduced call (virtual)"); 
            :}
;

staticCall ::= CLASS_ID : cid DOT ID : identifier LP RP
            {: RESULT = new StaticCall(cidleft, cid,identifier, new ArrayList<Expression>());
               //Global.debugger.Print("reduced static call" ); 
            :}
            
          |    CLASS_ID : cid DOT ID : identifier LP args : arguments RP
            {: RESULT = new StaticCall(cidleft, cid,identifier, arguments.getArguments());
               //Global.debugger.Print("reduced static call" ); 
            :}
;

virtualCall ::= ID : identifier LP RP
            {: RESULT = new VirtualCall(identifierleft, identifier, new ArrayList<Expression>()) ;
               //Global.debugger.Print("reduced virtual call" ); 
            :}
            
           |    ID : identifier LP args : arguments RP
            {: RESULT = new VirtualCall(identifierleft, identifier, arguments.getArguments()) ;
               //Global.debugger.Print("reduced virtual call" ); 
            :}
            
           |    expr : location DOT ID : identifier LP RP 
            {: RESULT = new VirtualCall(locationleft,location,identifier,new ArrayList<Expression>());
               //Global.debugger.Print("reduced virtual call" ); 
            :}
            
           |    expr : location DOT ID : identifier LP args : arguments RP 
            {: RESULT = new VirtualCall(locationleft,location,identifier,arguments.getArguments());
               //Global.debugger.Print("reduced virtual call" ); 
            :}
;

args        ::= expr : arg
            {: RESULT = new CallArguments(arg); 
               //Global.debugger.Print("reduced empty args" );
            :}
            
           |    args : argumentList COMMA expr : arg
            {: argumentList.addArgument(arg);
               RESULT = argumentList;
               //Global.debugger.Print("reduced virtual call" ); 
            :}
;


funcParams  ::= formal : parameter
            {: RESULT = new FunctionParameters(parameter) ;
               //Global.debugger.Print("reduced function parameters : " + RESULT); 
            :}
            
           |    funcParams : params COMMA formal : new_param
            {: params.addParameter(new_param);
			   RESULT = params;
               //Global.debugger.Print("reduced function parameters : " + RESULT); 
            :}
;

formal    ::= type : t ID : identifier 
            {: RESULT = new Formal (t,identifier); 
               //Global.debugger.Print("reduced formal : " + RESULT);    
            :} 
;

type      ::= INT : int_type     
            {: RESULT = new PrimitiveType(int_typeleft, DataTypes.INT);   
               //Global.debugger.Print("reduced primitive type " + RESULT);        
            :}
            
	     |    BOOLEAN : bool 
	        {: RESULT = new PrimitiveType(boolleft, DataTypes.BOOLEAN); 
	           //Global.debugger.Print("reduced primitive type " + RESULT);          
	        :}
	        
	     |    STRING : str
	        {: RESULT = new PrimitiveType(strleft, DataTypes.STRING); 
	           //Global.debugger.Print("reduced primitive type " + RESULT);          
	        :}
	        
	     |    CLASS_ID : class_id 
	        {: RESULT = new UserType(class_idleft, class_id); // new user-defined class
	           //Global.debugger.Print("reduced primitive type class " + RESULT); 
	        :}
	        
	     |    type : t LB RB
	        {: t.incrementDimension();  //increment number of dimensions by 1
	           RESULT = t;
	           //Global.debugger.Print("reduced primitive type " + RESULT);          
	        :}
	        
;



binop    ::= expr : operand1 PLUS expr : operand2               // expr + expr
	        {: RESULT = new MathBinaryOp     (operand1 , BinaryOps.PLUS     , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT); 
	        :}
	     |   expr : operand1 MINUS expr : operand2              // expr - expr
	        {: RESULT = new MathBinaryOp     (operand1 , BinaryOps.MINUS    , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT); 
	        :}
	     |   expr : operand1 MULTIPLY expr : operand2           // expr * expr
	        {: RESULT = new MathBinaryOp     (operand1 , BinaryOps.MULTIPLY , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT); 
	        :}
	     |   expr : operand1 DIVIDE expr : operand2             // expr / expr
	        {: RESULT = new MathBinaryOp     (operand1 , BinaryOps.DIVIDE   , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT); 
	        :}
	     |   expr : operand1 MOD expr : operand2                // expr % expr
	        {: RESULT = new MathBinaryOp     (operand1 , BinaryOps.MOD      , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT);
	        :}
	     |   expr : operand1 LAND expr : operand2                 // expr && expr
	        {: RESULT = new LogicalBinaryOp  (operand1 , BinaryOps.LAND     , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT);
	        :}
	     |   expr : operand1 LOR expr : operand2                // expr || expr
	        {: RESULT = new LogicalBinaryOp  (operand1 , BinaryOps.LOR      , operand2); 
	           //Global.debugger.Print("reduced math binary operation " + RESULT);
	        :}
	     |   expr : operand1 LT expr : operand2                 // expr < expr
	        {: RESULT = new LogicalBinaryOp  (operand1 , BinaryOps.LT       , operand2); 
	           //Global.debugger.Print("reduced logical binary operation " + RESULT);
	        :}
	     |   expr : operand1 LTE expr : operand2                // expr <= expr
	         {:	RESULT = new LogicalBinaryOp (operand1 , BinaryOps.LTE      , operand2);
	           //Global.debugger.Print("reduced logical binary operation " + RESULT);
	         :}
	     |   expr : operand1 GT expr : operand2                 // expr > expr
	         {:	RESULT = new LogicalBinaryOp (operand1, BinaryOps.GT        , operand2); 
	            //Global.debugger.Print("reduced logical binary operation " + RESULT);
	         :}
	     |   expr : operand1 GTE expr : operand2                // expr >= expr
	         {:	RESULT = new LogicalBinaryOp(operand1, BinaryOps.GTE, operand2);
	            //Global.debugger.Print("reduced logical binary operation " + RESULT);
	          :}
	     |   expr : operand1 EQUAL expr : operand2              // expr == expr
	         {:	RESULT = new LogicalBinaryOp(operand1, BinaryOps.EQUAL, operand2); 
	            //Global.debugger.Print("reduced logical binary operation " + RESULT);
	         :}
	     |   expr : operand1 NEQUAL expr : operand2             // expr != expr
	         {:	RESULT = new LogicalBinaryOp(operand1, BinaryOps.NEQUAL, operand2); 
	            //Global.debugger.Print("reduced logical binary operation " + RESULT);
	         :}
;

unop     ::= MINUS expr : operand                               // -expr
	        {: RESULT = new MathUnaryOp(UnaryOps.UMINUS, operand); 
	           //Global.debugger.Print("reduced math unary operation " + RESULT); 
	        :} %prec UMINUS
	        
	     |   LNEG expr : operand                                // !expr
	        {: RESULT = new LogicalUnaryOp(UnaryOps.LNEG, operand);
	           //Global.debugger.Print("reduced logical unary operation " + RESULT); 
	        :}

;

location ::=  ID : identifier
		     {:	RESULT = new VariableLocation(identifierleft,identifier); 
	            //Global.debugger.Print("reduced variable location " + RESULT);
	         :}
	         
         |    expr : location DOT ID : identifier
             {:	RESULT = new VariableLocation(identifierleft,location,identifier); 
	            //Global.debugger.Print("reduced variable location " + RESULT);
	         :} 
         |    expr : array LB expr : index RB
             {:	RESULT = new ArrayLocation(array,index); 
	            //Global.debugger.Print("reduced array location " + RESULT);
	         :} 
;

expr     ::=  location : lctn
		     {:	RESULT = lctn; 
	            //Global.debugger.Print("reduced location " + RESULT);
	         :}
	         
	     |    call : c
	         {:	RESULT = c;
	           //Global.debugger.Print("reduced expr as call");
	         :}
	         
         |    THIS : _this
             {:	RESULT = new This(_thisleft); 
	            //Global.debugger.Print("reduced expr as this");
	         :} 
	         
	     |    NEW CLASS_ID : _class LP RP 
	         {:	RESULT = new NewClass(_classleft, _class);
	            //Global.debugger.Print("reduced expr as new class : " + _class);
	         :}
	         
	     |    NEW type : t LB expr : size RB 
	         {:	RESULT = new NewArray(t,size);
	           //Global.debugger.Print("reduced expr as new type : " + t);
	         :}
	       
	     |    expr : array DOT LENGTH
	         {:	RESULT = new Length(array);
	            //Global.debugger.Print("reduced expr as expr.length");
	         :}
	           	         
	     |    binop : bop
	         {:	RESULT = bop;
	            //Global.debugger.Print("reduced expr as binop");
	         :} 
	          
	     |    unop : uop
	         {:	RESULT = uop;
	            //Global.debugger.Print("reduced expr as unop");
	         :}  
	         
	     |    literal:l
	         {:	RESULT = l;
	            //Global.debugger.Print("reduced expr as literal");
	         :}
	         
	     |    exprBlock : expression_block
	         {: RESULT = expression_block; 
	            //Global.debugger.Print("reduced expr as (expr)");
	         :}
	         
;  


exprBlock ::= LP expr : exp RP
	         {: RESULT = new ExpressionBlock(exp); 
	            //Global.debugger.Print("reduced expr block");
	         :}
;

literal   ::= INTEGER : _int
	         {:	RESULT = new Literal(_intleft   , LiteralTypes.INTEGER , _int); 
	            //Global.debugger.Print("reduced INTEGER literal");
	         :}
	      |    QUOTE : quote
	         {:	RESULT = new Literal(quoteleft  , LiteralTypes.STRING  , quote); 
	            //Global.debugger.Print("reduced INTEGER literal");
	         :}
	      |    TRUE : _true
	         {:	RESULT = new Literal(_trueleft  , LiteralTypes.TRUE    , _true); 
	            //Global.debugger.Print("reduced INTEGER literal");
	         :}
	      |    FALSE : _false
	         {:	RESULT = new Literal(_falseleft , LiteralTypes.FALSE   , _false); 
	            //Global.debugger.Print("reduced INTEGER literal");
	         :}
	      |    NULL : _null
	         {:	RESULT = new Literal(_nullleft  , LiteralTypes.NULL    , _null); 
	            //Global.debugger.Print("reduced INTEGER literal");
	         :}         
;
