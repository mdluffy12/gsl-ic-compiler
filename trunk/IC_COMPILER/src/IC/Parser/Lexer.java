/* The following code was generated by JFlex 1.4.3 on 11/16/12 6:04 PM */

/* Created By Micha Sherman,Tzvika Geft and Rani Lichtman 
 * Compilation course, University of Tel Aviv 2012 ©   
 */

package IC.Parser;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 11/16/12 6:04 PM from the specification file <tt>IC.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int INTEGER = 6;
	public static final int TRADCOM = 4;
	public static final int STRING = 2;
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\10\1\7\1\0\1\10\1\6\22\0\1\12\1\17\1\63"
			+ "\2\11\1\25\1\20\1\11\1\26\1\27\1\24\1\22\1\35\1\23"
			+ "\1\36\1\13\1\3\11\5\1\11\1\34\1\16\1\14\1\15\2\11"
			+ "\32\1\1\32\1\64\1\33\1\11\1\4\1\11\1\41\1\57\1\37"
			+ "\1\47\1\43\1\53\1\62\1\55\1\50\1\2\1\61\1\40\1\2"
			+ "\1\46\1\52\2\2\1\60\1\42\1\45\1\56\1\51\1\54\1\44"
			+ "\2\2\1\30\1\21\1\31\1\11\uff81\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\4\0\1\1\1\2\1\3\1\4\1\5\2\6\1\7"
			+ "\1\10\1\11\1\12\1\13\2\1\1\14\1\15\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\30\14\3\1\31\1\32\1\33\2\34\1\35"
			+ "\1\32\1\6\2\36\1\37\1\6\1\40\1\41\1\42"
			+ "\1\43\1\44\1\45\1\46\13\3\1\47\6\3\1\50"
			+ "\1\51\1\52\1\53\1\54\1\0\11\3\1\55\1\3"
			+ "\1\56\13\3\1\57\1\3\1\60\1\61\1\62\1\63"
			+ "\5\3\1\64\5\3\1\65\1\66\1\3\1\67\2\3"
			+ "\1\70\1\71\1\72\2\3\1\73\1\3\1\74\1\75" + "\1\76";

	private static int[] zzUnpackAction() {
		int[] result = new int[142];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\324"
			+ "\0\u0173\0\u01a8\0\324\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"
			+ "\0\u02e6\0\u031b\0\324\0\324\0\324\0\324\0\324\0\324"
			+ "\0\324\0\324\0\324\0\324\0\324\0\324\0\324\0\u0350"
			+ "\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8"
			+ "\0\u052d\0\u0562\0\u0597\0\324\0\324\0\u05cc\0\u0601\0\324"
			+ "\0\324\0\u0636\0\u066b\0\324\0\u06a0\0\324\0\u06d5\0\324"
			+ "\0\324\0\324\0\324\0\324\0\324\0\324\0\u070a\0\u073f"
			+ "\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"
			+ "\0\u091c\0\u013e\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a"
			+ "\0\324\0\324\0\324\0\324\0\324\0\u06a0\0\u0a8f\0\u0ac4"
			+ "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u013e"
			+ "\0\u0c6c\0\u013e\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"
			+ "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u013e\0\u0ee8\0\u013e"
			+ "\0\u013e\0\u013e\0\u013e\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"
			+ "\0\u013e\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u013e\0\u013e"
			+ "\0\u112f\0\u013e\0\u1164\0\u1199\0\u013e\0\u013e\0\u013e\0\u11ce"
			+ "\0\u1203\0\u013e\0\u1238\0\u013e\0\u013e\0\u013e";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[142];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\5\1\6\1\7\1\10\1\5\1\11\1\12\2\13"
			+ "\1\5\1\13\1\14\1\15\1\16\1\17\1\20\1\21"
			+ "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
			+ "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"
			+ "\1\7\1\42\1\43\1\7\1\44\1\45\1\7\1\46"
			+ "\1\47\1\7\1\50\1\51\2\7\1\52\1\53\2\7"
			+ "\1\54\1\5\1\55\5\56\1\57\1\60\1\55\2\56"
			+ "\1\55\47\56\1\61\1\62\24\13\1\63\40\13\3\64"
			+ "\1\65\3\64\1\0\1\66\1\64\2\66\6\64\3\66"
			+ "\2\64\1\66\1\64\1\66\1\64\4\66\26\64\66\0"
			+ "\5\6\31\0\24\6\3\0\5\7\31\0\24\7\5\0"
			+ "\1\11\1\0\1\11\66\0\1\13\70\0\1\67\10\0"
			+ "\1\70\54\0\1\71\64\0\1\72\64\0\1\73\64\0"
			+ "\1\74\70\0\1\75\65\0\1\76\44\0\5\7\31\0"
			+ "\1\7\1\77\11\7\1\100\10\7\3\0\5\7\31\0"
			+ "\4\7\1\101\17\7\3\0\5\7\31\0\6\7\1\102"
			+ "\15\7\3\0\5\7\31\0\1\7\1\103\3\7\1\104"
			+ "\16\7\3\0\5\7\31\0\16\7\1\105\2\7\1\106"
			+ "\2\7\3\0\5\7\31\0\4\7\1\107\12\7\1\110"
			+ "\4\7\3\0\5\7\31\0\7\7\1\111\4\7\1\112"
			+ "\7\7\3\0\5\7\31\0\13\7\1\113\10\7\3\0"
			+ "\5\7\31\0\2\7\1\114\21\7\3\0\5\7\31\0"
			+ "\16\7\1\115\5\7\3\0\5\7\31\0\13\7\1\116"
			+ "\5\7\1\117\2\7\3\0\5\7\31\0\4\7\1\120"
			+ "\17\7\3\0\5\56\3\0\2\56\1\0\47\56\11\0"
			+ "\1\60\122\0\1\121\1\122\14\0\1\123\1\124\13\0"
			+ "\1\125\54\0\1\126\4\0\1\66\1\0\2\66\6\0"
			+ "\3\66\2\0\1\66\1\0\1\66\1\0\4\66\26\0"
			+ "\6\67\1\12\1\13\55\67\1\0\5\7\31\0\2\7"
			+ "\1\127\21\7\3\0\5\7\31\0\7\7\1\130\14\7"
			+ "\3\0\5\7\31\0\7\7\1\131\14\7\3\0\5\7"
			+ "\31\0\2\7\1\132\16\7\1\133\2\7\3\0\5\7"
			+ "\31\0\3\7\1\134\20\7\3\0\5\7\31\0\6\7"
			+ "\1\135\15\7\3\0\5\7\31\0\11\7\1\136\12\7"
			+ "\3\0\5\7\31\0\17\7\1\137\4\7\3\0\5\7"
			+ "\31\0\15\7\1\140\6\7\3\0\5\7\31\0\1\7"
			+ "\1\141\22\7\3\0\5\7\31\0\6\7\1\142\15\7"
			+ "\3\0\5\7\31\0\11\7\1\143\12\7\3\0\5\7"
			+ "\31\0\1\7\1\144\22\7\3\0\5\7\31\0\11\7"
			+ "\1\145\12\7\3\0\5\7\31\0\13\7\1\146\10\7"
			+ "\3\0\5\7\31\0\4\7\1\147\17\7\3\0\5\7"
			+ "\31\0\6\7\1\150\15\7\3\0\5\7\31\0\3\7"
			+ "\1\151\20\7\3\0\5\7\31\0\6\7\1\152\15\7"
			+ "\3\0\5\7\31\0\23\7\1\153\3\0\5\7\31\0"
			+ "\6\7\1\154\15\7\3\0\5\7\31\0\11\7\1\155"
			+ "\12\7\3\0\5\7\31\0\4\7\1\156\17\7\3\0"
			+ "\5\7\31\0\4\7\1\157\17\7\3\0\5\7\31\0"
			+ "\3\7\1\160\20\7\3\0\5\7\31\0\4\7\1\161"
			+ "\17\7\3\0\5\7\31\0\1\7\1\162\22\7\3\0"
			+ "\5\7\31\0\10\7\1\163\13\7\3\0\5\7\31\0"
			+ "\3\7\1\164\20\7\3\0\5\7\31\0\1\7\1\165"
			+ "\22\7\3\0\5\7\31\0\1\7\1\166\22\7\3\0"
			+ "\5\7\31\0\2\7\1\167\21\7\3\0\5\7\31\0"
			+ "\17\7\1\170\4\7\3\0\5\7\31\0\3\7\1\171"
			+ "\20\7\3\0\5\7\31\0\11\7\1\172\12\7\3\0"
			+ "\5\7\31\0\6\7\1\173\15\7\3\0\5\7\31\0"
			+ "\11\7\1\174\12\7\3\0\5\7\31\0\7\7\1\175"
			+ "\14\7\3\0\5\7\31\0\7\7\1\176\14\7\3\0"
			+ "\5\7\31\0\4\7\1\177\17\7\3\0\5\7\31\0"
			+ "\4\7\1\200\17\7\3\0\5\7\31\0\4\7\1\201"
			+ "\17\7\3\0\5\7\31\0\22\7\1\202\1\7\3\0"
			+ "\5\7\31\0\21\7\1\203\2\7\3\0\5\7\31\0"
			+ "\7\7\1\204\14\7\3\0\5\7\31\0\16\7\1\205"
			+ "\5\7\3\0\5\7\31\0\1\206\23\7\3\0\5\7"
			+ "\31\0\23\7\1\207\3\0\5\7\31\0\10\7\1\210"
			+ "\13\7\3\0\5\7\31\0\2\7\1\211\21\7\3\0"
			+ "\5\7\31\0\7\7\1\212\14\7\3\0\5\7\31\0"
			+ "\17\7\1\213\4\7\3\0\5\7\31\0\3\7\1\214"
			+ "\20\7\3\0\5\7\31\0\7\7\1\215\14\7\3\0"
			+ "\5\7\31\0\4\7\1\216\17\7\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[4717];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {
			"Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\4\0\1\11\2\1\1\11\2\1\1\11\7\1\15\11"
			+ "\14\1\2\11\2\1\2\11\2\1\1\11\1\1\1\11"
			+ "\1\1\7\11\22\1\5\11\1\0\70\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[142];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	StringBuilder qstring = new StringBuilder();

	/*
	 * check if a string rep. of an integer is a valid integer value (-2^31 < x
	 * < 2^31 - 1)
	 */
	public boolean isValidInteger(String n_str) {
		try {
			long n = Long.parseLong(n_str);
			if (n < Integer.MIN_VALUE | n > Integer.MAX_VALUE)
				return false;
		} catch (java.lang.NumberFormatException e) {
			return false;
		}

		return true;
	}

	public int getLineNumber() {
		return yyline + 1;
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public Lexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 * 
	 * @param packed
	 *            the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 132) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		// unlikely but not impossible: read 0 characters, but not at end of
		// stream
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}

		// numRead < 0
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		setZzAtBOL(true);
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = setYychar(setYycolumn(0));
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	@Override
	public Token next_token() throws java.io.IOException, LexicalError {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					zzR = false;
					break;
				case '\r':
					yyline++;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
					}
					break;
				default:
					zzR = false;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 32: {
				yybegin(TRADCOM);
			}
			case 63:
				break;
			case 7: {
				return (new Token(sym.DIVIDE, yyline, yytext()));
			}
			case 64:
				break;
			case 60: {
				return (new Token(sym.EXTENDS, yyline, yytext()));
			}
			case 65:
				break;
			case 58: {
				return (new Token(sym.STRING, yyline, yytext()));
			}
			case 66:
				break;
			case 9: {
				return (new Token(sym.GT, yyline, yytext()));
			}
			case 67:
				break;
			case 22: {
				return (new Token(sym.SEMI, yyline, yytext()));
			}
			case 68:
				break;
			case 36: {
				return (new Token(sym.NEQUAL, yyline, yytext()));
			}
			case 69:
				break;
			case 56: {
				return (new Token(sym.LENGTH, yyline, yytext()));
			}
			case 70:
				break;
			case 51: {
				return (new Token(sym.VOID, yyline, yytext()));
			}
			case 71:
				break;
			case 41: {
				qstring.append("\\n");
			}
			case 72:
				break;
			case 53: {
				return (new Token(sym.FALSE, yyline, yytext()));
			}
			case 73:
				break;
			case 62: {
				return (new Token(sym.CONTINUE, yyline, yytext()));
			}
			case 74:
				break;
			case 59: {
				return (new Token(sym.RETURN, yyline, yytext()));
			}
			case 75:
				break;
			case 47: {
				return (new Token(sym.ELSE, yyline, yytext()));
			}
			case 76:
				break;
			case 21: {
				return (new Token(sym.RB, yyline, yytext()));
			}
			case 77:
				break;
			case 50: {
				return (new Token(sym.NULL, yyline, yytext()));
			}
			case 78:
				break;
			case 34: {
				return (new Token(sym.GTE, yyline, yytext()));
			}
			case 79:
				break;
			case 52: {
				return (new Token(sym.CLASS, yyline, yytext()));
			}
			case 80:
				break;
			case 30: {
				throw new LexicalError("unexpected character (\'"
						+ yytext().charAt(0) + "\') following a zero", yyline);
			}
			case 81:
				break;
			case 54: {
				return (new Token(sym.WHILE, yyline, yytext()));
			}
			case 82:
				break;
			case 55: {
				return (new Token(sym.BREAK, yyline, yytext()));
			}
			case 83:
				break;
			case 57: {
				return (new Token(sym.STATIC, yyline, yytext()));
			}
			case 84:
				break;
			case 16: {
				return (new Token(sym.LP, yyline, yytext()));
			}
			case 85:
				break;
			case 44: {
				yybegin(YYINITIAL);
			}
			case 86:
				break;
			case 38: {
				return (new Token(sym.LOR, yyline, yytext()));
			}
			case 87:
				break;
			case 46: {
				return (new Token(sym.INT, yyline, yytext()));
			}
			case 88:
				break;
			case 45: {
				return (new Token(sym.NEW, yyline, yytext()));
			}
			case 89:
				break;
			case 11: {
				return (new Token(sym.LNEG, yyline, yytext()));
			}
			case 90:
				break;
			case 42: {
				qstring.append("\\\"");
			}
			case 91:
				break;
			case 40: {
				qstring.append("\\t");
			}
			case 92:
				break;
			case 14: {
				return (new Token(sym.MULTIPLY, yyline, yytext()));
			}
			case 93:
				break;
			case 29: {
				yybegin(YYINITIAL);
				return new Token(sym.QUOTE, yyline, qstring.toString());
			}
			case 94:
				break;
			case 26: {
				throw new LexicalError("illegal string character \'" + yytext()
						+ "\'", yyline);
			}
			case 95:
				break;
			case 13: {
				return (new Token(sym.MINUS, yyline, yytext()));
			}
			case 96:
				break;
			case 35: {
				return (new Token(sym.LTE, yyline, yytext()));
			}
			case 97:
				break;
			case 43: {
				qstring.append("\\\\");
			}
			case 98:
				break;
			case 25: {
				qstring.setLength(0);
				yybegin(STRING);
			}
			case 99:
				break;
			case 17: {
				return (new Token(sym.RP, yyline, yytext()));
			}
			case 100:
				break;
			case 24: {
				return (new Token(sym.DOT, yyline, yytext()));
			}
			case 101:
				break;
			case 8: {
				return (new Token(sym.ASSIGN, yyline, yytext()));
			}
			case 102:
				break;
			case 27: {
				qstring.append(yytext());
			}
			case 103:
				break;
			case 1: {
				throw new LexicalError(
						"illegal character \'" + yytext() + "\'", yyline);
			}
			case 104:
				break;
			case 23: {
				return (new Token(sym.COMMA, yyline, yytext()));
			}
			case 105:
				break;
			case 31: {
				yypushback(1); // Push the last letter back into the input
								// stream to be read again
				yybegin(YYINITIAL);
				return new Token(sym.INTEGER, yyline, 0);
			}
			case 106:
				break;
			case 61: {
				return (new Token(sym.BOOLEAN, yyline, yytext()));
			}
			case 107:
				break;
			case 39: {
				return (new Token(sym.IF, yyline, yytext()));
			}
			case 108:
				break;
			case 4: {
				yybegin(INTEGER);
			}
			case 109:
				break;
			case 49: {
				return (new Token(sym.TRUE, yyline, yytext()));
			}
			case 110:
				break;
			case 3: {
				return new Token(sym.ID, yyline, yytext());
			}
			case 111:
				break;
			case 12: {
				return (new Token(sym.PLUS, yyline, yytext()));
			}
			case 112:
				break;
			case 28: {
				throw new LexicalError("unterminated string at end of line",
						yyline);
			}
			case 113:
				break;
			case 20: {
				return (new Token(sym.LB, yyline, yytext()));
			}
			case 114:
				break;
			case 18: {
				return (new Token(sym.LCBR, yyline, yytext()));
			}
			case 115:
				break;
			case 10: {
				return (new Token(sym.LT, yyline, yytext()));
			}
			case 116:
				break;
			case 19: {
				return (new Token(sym.RCBR, yyline, yytext()));
			}
			case 117:
				break;
			case 2: {
				return new Token(sym.CLASS_ID, yyline, yytext());
			}
			case 118:
				break;
			case 37: {
				return (new Token(sym.LAND, yyline, yytext()));
			}
			case 119:
				break;
			case 33: {
				return (new Token(sym.EQUAL, yyline, yytext()));
			}
			case 120:
				break;
			case 15: {
				return (new Token(sym.MOD, yyline, yytext()));
			}
			case 121:
				break;
			case 48: {
				return (new Token(sym.THIS, yyline, yytext()));
			}
			case 122:
				break;
			case 6: {
			}
			case 123:
				break;
			case 5: {
				if (isValidInteger(yytext()))
					return new Token(sym.INTEGER, yyline,
							Integer.parseInt(yytext()));
				else
					throw new LexicalError("illegal Integer value " + yytext(),
							yyline);
			}
			case 124:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					switch (zzLexicalState) {
					case INTEGER: {
						yybegin(YYINITIAL);
						return new Token(sym.INTEGER, yyline, 0);
					}
					case 143:
						break;
					case TRADCOM: {
						throw new LexicalError(
								"unterminated comment at end of line", yyline);
					}
					case 144:
						break;
					case STRING: {
						throw new LexicalError(
								"unterminated string at end of line", yyline);
					}
					case 145:
						break;
					case YYINITIAL: {
						return new Token(sym.EOF, yyline, "EOF");
					}
					case 146:
						break;
					default: {
						return new Token(sym.EOF, yyline, "EOF");
					}
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	public int getYychar() {
		return yychar;
	}

	public int setYychar(int yychar) {
		this.yychar = yychar;
		return yychar;
	}

	public int getYycolumn() {
		return yycolumn;
	}

	public int setYycolumn(int yycolumn) {
		this.yycolumn = yycolumn;
		return yycolumn;
	}

	public boolean isZzAtBOL() {
		return zzAtBOL;
	}

	public void setZzAtBOL(boolean zzAtBOL) {
		this.zzAtBOL = zzAtBOL;
	}

}
